/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
　Qreki.nako　バージョン:1.0.3　(2022/01/17)

　なでしこで西暦と旧暦（和暦）を相互変換したりなんだりするもの。
　標準で使えるnakodate.dllの「旧暦変換」とは異なり、歴史上使用されていた実際の暦と
合うよう文献データを元に変換するものです。
　（一口に旧暦と言っても幾度も改暦が繰り返されており、人為的に操作が加えられている
場合もあるため、天文学的な計算で算出するのは限界があります）
　現在取得できるデータの範囲は645/2/2(大化元年1月1日)から2099/12/31です。
　おまけで、旧暦や節切の干支、九星、六曜が取得出来ます。
　また、今のなでしこでは出来ない紀元前の修正ユリウス日の取得や、修正ユリウス日から
西暦への変換が出来ます。
　データの詳細等についてははこちら。https://github.com/snowdrops89/Qreki_nako

　旧暦の出力については十分確認したつもりですが、万一間違いがありましたらすみません。
　プログラムでもデータでも、間違いを発見されたら教えていただけると大変助かります☆
　なでしこの掲示板でＯＫです。https://www.eznavi.net/site/bbs/

　作者:雪乃☆雫　／　ライセンス:CC0　／　制作時のナデシコバージョン:1.585
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

＃和暦データ
和暦データ＝「Qreki_data.json」を開いて、それをJSONデコード。
//和暦データ＝「{ランタイムパス}/lib/Qreki_data.json」を開いて、それをJSONデコード。
元号一覧＝和暦データ@"元号一覧"
旧暦表＝和暦データ@"旧暦表"

＃定数
グレゴリオ暦開始＝「1582/10/15」の修正ユリウス日取得G。
太陽暦採用＝「1873/01/01」の修正ユリウス日取得G。# 明治六年
元号未制定時期＝「701/05/02」の修正ユリウス日取得J。# 大宝元年以前
元号並立期間始め＝「1331/09/11」の修正ユリウス日取得J。# 南北朝時代
元号並立期間終り＝「1394/08/01」の修正ユリウス日取得J。
旧暦表始め＝旧暦表[0]@"元日"の修正ユリウス日取得J。
旧暦表終り＝旧暦表[(旧暦表の要素数)-1]@"元日"の修正ユリウス日取得G-1。

#-----西暦を旧暦に変換する--------------------
＃西暦→旧暦変換
//645/2/2(大化元年1月1日)から2099/12/31までの西暦の日付を旧暦に変換。
●西暦旧暦変換(西暦を|西暦の)
　旧暦とは変数。元号とは変数。
　旧暦は西暦から旧暦取得。
　旧暦を「/」で区切る。月とは変数＝それ[1]。日とは変数＝それ[2]。
　年とは変数＝西暦から「旧暦」で元号取得。
　もし、(年の配列要素数)＞１ならば、「{年[0]}年/{年[1]}年{月}月{日}日」で戻る。
　違えば、「{年}年{月}月{日}日」で戻る。

＃西暦→和暦変換
//645/2/2(大化元年1月1日)から1872/12/31(明治5年12月2日)までの西暦の日付を旧暦に変換。
//1873/1/1(明治6年1月1日)以降の場合は、現行のグレゴリオ暦の西暦年を元号年に変換っていうかなでしこの和暦変換ｗ
●西暦和暦変換(西暦を|西暦の)
　もし、太陽暦採用≦(西暦の修正ユリウス日取得2)ならば、西暦を和暦変換して戻る。
　違えば、西暦を西暦旧暦変換して戻る。

＃旧暦取得
/*
・645/2/2(大化元年1月1日)から2099/12/31までの西暦から旧暦を取得。
・文献データを元に暦日を取得するもので、天文学的な計算によって算出するなでしこの旧暦変換とは結果が異なる場合があります（特に閏月の設定）
・また西暦は、1582/10/04までユリウス暦、1582/10/15からグレゴリオ暦としています（なでしこの旧暦変換では、1582/10/15以前も遡りでグレゴリオ暦を適用されているので結果がずれます）
*/
●旧暦取得(西暦から|西暦の|西暦で|西暦を)
　#西暦をチェックして修正ユリウス日に変換。
　西暦は西暦を英数半角変換して、「／」を「/」に置換。
　西暦を『\d{3,4}/\d{1,2}/\d{1,2}』で正規表現マッチ。
　もし、それが空ならば、「【日付が不正です】」で戻る。
　対象日とは変数＝西暦の修正ユリウス日取得2。
　もし、(旧暦表始め＞対象日)または(旧暦表終わり＜対象日)ならば、「【日付が有効範囲外です】」で戻る。
　#旧暦Noから対象データを設定
　旧暦Noとは変数＝西暦の旧暦番号検索。
　対象データとは変数＝旧暦表[旧暦No]。
　対象データ@"元日"を「/」で区切る。
　年とは変数＝それ[0]。
　元日とは変数＝対象データ@"元日"の修正ユリウス日取得2。
　翌年とは変数＝旧暦表[旧暦No+1]@"元日"の修正ユリウス日取得2。
　閏とは変数＝対象データ@"閏"。もし、閏＝空ならば、閏＝0。
　月大小とは変数＝対象データ@"大小"。
　日数とは変数＝対象日-元日。
　月とは変数＝空。日とは変数＝空。
　#元日からの日数から各月の日数を引いていき、何月何日か求める。
　月大小の要素数回
　　#各月の日数は、大の月1、小の月0でテーブルにしているので、それを29に足しているだけ。
　　大小＝月大小[回数-1]。
　　もし、(29＋大小)≦日数ならば、
　　　日数＝日数-(29＋大小)。
　　違えば、
　　　日＝日数＋１。
　　　#閏月があれば月数を調整
　　　もし、（閏≠0）かつ（閏＜回数）ならば、
　　　　月＝回数-1。
　　　　もし、月＝閏ならば、月＝閏＋0.5。
　　　違えば、
　　　　　月＝回数。
　　　もし、（閏≠０）かつ(閏＜月)かつ(月＜閏＋１)ならば、閏＝閏を２でゼロ埋め。月＝「閏{閏}」
　　　違えば、月＝月を２でゼロ埋め。
　　　日＝日を２でゼロ埋め。
　　　「{年}/{月}/{日}」で戻る。
　「不明」で戻る。

#-----和暦を西暦に変換する--------------------
＃和暦→西暦変換
/*
・和暦を旧暦の日付として、西暦の日付に変換。天皇の年紀には非対応。
　明治六年以降は旧暦ではなく現行のグレゴリオ暦により、元号年を西暦年に変換しているだけ。
　（ただし、旧暦fに「旧暦」を指定した場合は、旧暦の日付として変換）
・西暦は、1582/10/04までユリウス暦、1582/10/15からグレゴリオ暦。
*/
●和暦西暦変換({文字列=空}旧暦fで和暦を|和暦の)
　#和暦を年月日に分解
　和暦は、和暦を英数半角変換して、「/」で区切る。
　もし、(和暦の配列要素数)≦１ならば、和暦は和暦を「[年月日]」で正規表現区切る。
　元号年とは変数＝和暦[0]。月とは変数＝和暦[1]。日とは変数＝和暦[2]を整数変換。
　#日付のチェック（大の月か小の月かはあとでチェックする）
　もし、(月＞12)または(日＞31)ならば、「【日付が不正です】」で戻る。
　#閏月かどうか（実際のチェックはあとでする）
　閏とは変数＝いいえ。
　もし、(月の1文字左部分)＝「閏」ならば、月＝月の「閏」を空に置換。閏＝はい。
　月＝月を整数変換。
　#漢字表記を算用数字に（元年、正月、朔日の表記に対応）
　もし、月＝「正」ならば、月＝「1」。
　//もし、(月を数列か判定)＝いいえならば、月＝月を算用数字。
　もし、閏＝はいならば、月＝月＋0.5。
　もし、日＝「朔」ならば、日＝「1」。
　//もし、(日を数列か判定)＝いいえならば、日＝日を算用数字。
　もし、(元号年の1文字右部分)＝「元」ならば、
　　元号年＝元号年の(元号年の文字数)から1文字削除。
　　元号年に「1」を追加。
　#元号年からその年の正月を取得する。
　元号年から旧暦fで西暦範囲取得。元日とは変数＝それ[0]。
　もし、(旧暦f≠「旧暦」)かつ（太陽暦採用≦(元日の修正ユリウス日取得2)）ならば、　　#明治六年(グレゴリオ暦採用)以降の場合。
　　元日を「/」で区切る。年とは変数＝それ[0]。「{年}/{月を２でゼロ埋め}/{日を２でゼロ埋め}」で戻る。
　違えば、
　　#旧暦Noから対象データを設定
　　旧暦Noとは変数＝元日の旧暦番号検索。
　　対象データ＝旧暦表[旧暦No]。
　　閏月とは変数＝対象データ@"閏"。月大小とは変数＝対象データ@"大小"。もし、閏月＝空ならば、閏月＝０。
　　元日は元日の修正ユリウス日取得2。
　　#閏月のチェック
　　もし、(閏月≠０)かつ((閏＝はい)かつ(閏月≠(月を切り捨て)))ならば、「【{元号年}年に閏{月を切り捨て}月はありません】」で戻る。
　　もし、(閏月≠０)かつ(閏月<月)ならば、月＝月+1を切捨て。
　　#日付チェック
　　もし、日＞30ならば、「【日付が不正です】」で戻る。#大の月30日
　　もし、(日≧30)かつ(月大小[月-1]＝0)ならば、「【{元号年}年{月-1}月は小の月です】」で戻る。#小の月29日
　　#ループで月の日数を足していき、最後に日にちを足して、元旦の日付からの日数を数える。
　　日数とは変数＝０。
　　(月-1)回
　　　日数＝日数＋２９＋月大小[回数-1]。
　　日数＝日数＋日-1。日付＝元日＋日数。
　　もし、日付≧グレゴリオ暦開始ならば、日付からグレゴリオ暦取得して戻る。
　　違えば、日付からユリウス暦取得して戻る。

＃旧暦→西暦変換
●旧暦西暦変換(旧暦を|西暦の)
　　旧暦を「旧暦」で和暦西暦変換して戻る。

＃＃大化元年以降の元号年から、その年の元日と大晦日を西暦の日付にして[元日,大晦日]の配列で返す。
/*
・元年も改元日は考慮せず、その年の元日から表示させています（慶応四年と明治元年は同じになる）
・元号の終了年については考慮していません（ので、昭和96年＝2021年みたいな計算も可能です）
・和暦は、明治五年までは旧暦、明治六年からは西暦と同じ。ただし、旧暦fに「旧暦」を指定した場合は、全て旧暦で取得。
・西暦は、1582/10/04までユリウス暦、1582/10/15からグレゴリオ暦。
・元号未制定期間の天皇の年紀については対応していません。
*/
●西暦範囲取得({文字列=空}旧暦fで元号年から|元号年の)
　#元年に対応
　元号年＝元号年の「年」を空に置換して、それを英数半角変換。
　もし、(元号年の1文字右部分)＝「元」ならば、
　　元号年＝元号年の(元号年の文字数)から1文字削除。
　　元号年に「1」を追加。
　ここまで。
　#元号と年を分離し、漢数字は算用数字に変換。
　年＝元号年を「\d+|[一二三四五六七八九十]+」で正規表現マッチ。
　元号＝元号年の年を空に置換。
　もし、年＝「元」ならば、年＝１。
　//もし、(年を数列か判定)＝いいえならば、年＝年を算用数字。
　#元号一覧から元号を検索して、改元日（開始日）を求める。
　元号一覧を反復
　　もし、(元号＝対象@"元号")または(元号＝対象@"略号")ならば、
　　　元号No＝回数-1。
　　　#明治6より後の場合
　　　もし、(旧暦f≠「旧暦」)かつ((元号No≦3)または((元号No＝4)かつ(年≧6)))ならば、
　　　　対象@"西暦"を「/」で区切る。年＝年+それ[0]-1。
　　　　「{年}/1/1{改行}{年}/12/31」で戻る。
　　　ここまで。
　　　改元日＝対象@"西暦"。
　　　旧暦Noとは変数＝(改元日の旧暦番号検索)+年-1。
　　　元日＝旧暦表[旧暦No]@"元日"。
　　　大晦日＝(旧暦表[旧暦No+1]@"元日"の修正ユリウス日取得2)-1。
　　　もし、大晦日≧グレゴリオ暦開始ならば、大晦日＝大晦日からグレゴリオ暦取得。
　　　違えば、大晦日＝大晦日からユリウス暦取得。
　　　「{元日},{大晦日}」を「,」で区切って戻る。

#-----日単位で元号年を取得する--------------------
＃本気の元号取得
/*
・大化元年(645/2/2)以降の西暦の日付から、改元日を元に日単位で元号(和暦年)を返す。
・一応年だけ指定することもできます。その場合は、その年の12/31で取得した元号を返す。（1/1だともれなく元年が出なくなるため）
　※ 1872年以前の和暦は旧暦なので、和暦と西暦の年が完全には一致せず、必ず年末年始はズレがあります。
・1873〜2099までの旧暦にも対応。
　旧暦fに「旧暦」を指定すると、太陽暦採用(1873/1/1)以降でも、旧暦としての元号を返す。
　(省略や「旧暦」以外の場合は、普通にグレゴリオ暦としての元号を返す)
・南北朝時代の元号並立期間は[南朝,北朝]の配列で返す。
・元号未制定期間は天皇の年期を代用。そのため、「大化」「白雉」「朱鳥」の開始終了は、例外的に改元日と異なる。
・「文中」は正確な改元日が不明(4/?)のため仮に4/1として運用。
・「明治」は立年改元で布告されているため旧1/1から明治元年とする説もあるが「なでしこ３」の和暦変換に合わせ改元日を採用。
・「平成」は、1989/1/8改元で、新暦では年が明けていますが旧暦では年が明ける前の改元ですが、例外的に年が明けるまでは昭和63年とする。
　（旧暦しか無かった時のルールでは、平成元年が19日しか無いことになってしまい、新暦の和暦と元号が合わなくなるため）
*/
●元号取得(西暦から|西暦を|西暦の{文字列=空}旧暦fで)
　#西暦をチェックして修正ユリウス日に変換。
　西暦は西暦を英数半角変換して、「／」を「/」に置換。
　西暦を「/」で区切る。年とは変数＝それ[0]。
　もし、(それの要素数)＜３ならば、西暦＝「{年}/12/31」。#年だけ指定された場合
　西暦を『\d{3,4}/\d{1,2}/\d{1,2}』で正規表現マッチ。
　もし、それが空ならば、「【日付が不正です】」で戻る。
　対象日とは変数＝西暦の修正ユリウス日取得2。
　もし、旧暦表始め＞対象日ならば、「【日付が有効範囲外です】」で戻る。
　#改元日では処理できない例外期間の元号の開始日。
　初日とは変数＝空。
　もし、対象日≦元号未制定時期ならば、初日＝「開始」。
　違えば、もし、（元号並立期間始め≦対象日）かつ（元号並立期間終り≧対象日）ならば、初日＝「開始」。
　違えば、初日＝「西暦」。#西暦改元日
　#データの開始終了も修正ユリウス日に変換して、その元号の範囲に指定した西暦が該当するか調べる。
　元号とは変数＝空。開始日とは変数＝空。終了日とは変数＝空。改元日とは変数＝空。
　南北朝時代とは変数＝いいえ。南朝元号年とは変数＝空。北朝元号年とは変数＝空。南北とは変数＝空。
　元号一覧を反復
　　元号＝対象@"元号"。元号No＝回数-1。開始日＝空。
　　もし、対象@初日＝空ならば、続ける。#元号の開始日に指定した項目が空なら明らかに対象外の元号。
　　開始日＝対象@初日を修正ユリウス日取得2。
　　もし、開始日≦対象日ならば、
　　　もし、元号No＝０ならば、対象@"西暦"から元号Noと旧暦fで西暦の和暦年数取得して、元号&それで戻る。
　　　違えば、もし、（元号並立期間始め≦対象日）かつ（元号並立期間終り≧対象日）ならば、終了日＝対象@"終了"を修正ユリウス日取得2。
　　　違えば、終了日＝元号一覧[元号No-1]@初日を修正ユリウス日取得2。
　　　もし、対象日≦終了日ならば
　　　　#例外期間の処理
　　　　もし、（元号並立期間始め≦対象日）かつ（元号並立期間終り≧対象日）ならば、
　　　　　改元日＝対象@"西暦"。南北＝対象@"南北朝"。
　　　　違えば、
　　　　　改元日＝対象@初日。南北＝空。
　　　　#既に南北朝時代のフラグが立っていた場合南北の元号を配列にして戻す。
　　　　もし、南北朝時代＝はいならば、
　　　　　改元日から元号Noと旧暦fで西暦の和暦年数取得。
　　　　　南朝元号年＝元号&それ。
　　　　　「{南朝元号年},{北朝元号年}」を「,」で区切って戻る。
　　　　#元号並立期間内ならフラグを立てて続ける。
　　　　違えば、もし、（元号並立期間始め≦対象日）かつ（元号並立期間終り≧対象日）ならば、
　　　　　改元日から元号Noと旧暦fで西暦の和暦年数取得。
　　　　　もし、南北＝「南北」ならば、元号&それで戻る。
　　　　　北朝元号年＝元号&それ。
　　　　　南北朝時代＝はい。続ける。
　　　　#南北朝時代で無ければ普通に元号を返す。
　　　　違えば、
　　　　　改元日から元号Noと旧暦fで西暦の和暦年数取得。
　　　　　もし、(元号＝「平成」)かつ(それ≠「元」)かつ(それ＝０)ならば、「昭和63」で戻る。#平成の例外処理
　　　　　違えば、元号&それで戻る。
　「不明」で戻る。

＃＃改元日からの年数を数える（元号取得の下請け）
/*
グレゴリオ暦であれば、和暦年の年数は「西暦年-改元日+1」で計算できる。
旧暦の場合は、旧暦の元日がいつかを調べる必要がある（それ以前は前年）
*/
●和暦年数取得(元号Noと{文字列=空}旧暦fで改元日から日付の)
　　改元日を「/」で区切る。改元年とは変数＝それ[0]。
　　日付を「/」で区切る。年とは変数＝それ[0]。
　　対象日とは変数＝日付の修正ユリウス日取得2。年数とは変数＝空。
　　もし、(対象日≧太陽暦採用)かつ(旧暦f≠「旧暦」)ならば、#太陽暦採用後（グレゴリオ暦）
　　　　年数＝年-改元年+1。
　　　　もし、年数＝1ならば、「元」で戻る。
　　　　違えば、年数を２でゼロ埋めして戻る。
　　違えば、
　　　　改元日で旧暦番号検索。元年とは変数＝それ。
　　　　日付で旧暦番号検索。旧暦Noとは変数＝それ。
　　　　もし、元号一覧[元号No]@"元号"＝「平成」ならば、元年＝元年+1。#平成の例外処理
　　　　年数＝旧暦No-元年+1。
　　　　もし、年数＝1ならば、「元」で戻る。
　　　　違えば、年数を２でゼロ埋めで戻る。

#-----旧暦表から目的の年を検索して番号を得る--------------------
//色々な命令の下請け
●旧暦番号検索（西暦を|西暦の|西暦で）
　　西暦を「/」で区切る。対象年とは変数＝それ[0]。
　　旧暦表[0]@"元日"を「/」で区切る。検索開始年とは変数＝それ[0]。
　　旧暦No＝対象年-検索開始年。
　　#元日より前なら前年。
　　西暦＝西暦の修正ユリウス日取得2。
　　元日とは変数＝旧暦表[旧暦No]@"元日"の修正ユリウス日取得2。
　　もし、西暦＜元日ならば、旧暦No＝旧暦No-1。
　　旧暦Noで戻る。

#-----西暦と修正ユリウス日とを相互変換する--------------------
＃修正ユリウス日→西暦
※1582/10/15以降はグレゴリオ暦、それ以前はユリウス暦として修正ユリウス日を西暦に変換する。
●MJD西暦変換(MJDを|MJDの|MJDで)
　　もし、MJD≧グレゴリオ暦開始ならば、MJDからグレゴリオ暦取得で戻る。
　　違えば、MJDからユリウス暦取得で戻る。

＃西暦→修正ユリウス日
※1582/10/15以降はグレゴリオ暦、それ以前はユリウス暦として西暦を修正ユリウス日に変換する。（修正ユリウス日取得2）
●西暦MJD変換(西暦を|西暦の|西暦で)
　　西暦の修正ユリウス日取得2。

＃1582/10/15以降はグレゴリオ暦、それ以前はユリウス暦として修正ユリウス日を取得する。
※ユリウス暦は1582/10/04までで1582/10/05〜1582/10/14という日付は本来は無いが、指定された場合はユリウス暦の計算式使う。(グレゴリオ歴で1582/10/15〜1582/10/24と同じになる)
※BCの場合は年にマイナスを付ける(「-1/1/1」など)。ADもBCも0年は存在しない(AD1年の前年はBC1年)ので注意。0年が指定された時は空を返す。
●修正ユリウス日取得2(日付を|日付の|日付で)
　　日付を「/」で区切る。y＝それ[0]を整数変換。
　　もし、y＝0ならば、空で戻る。
　　グレゴリオ暦とは整数＝いいえ。
　　もし、グレゴリオ暦開始≦(日付の修正ユリウス日取得G）ならば、日付の修正ユリウス日取得Gで戻る。
　　違えば、日付の修正ユリウス日取得Jで戻る。

＃西暦を全てグレゴリオ暦として修正ユリウス日を取得する。
※標準の修正ユリウス日取得と同じですが、AD100より前の日付もBCの日付も取得出来ます。
●修正ユリウス日取得G(日付を|日付の|日付で)
　　ymd＝日付を「/」で区切る。
　　y＝ymd[0]を整数変換。m＝ymd[1]を整数変換。d＝ymd[2]を整数変換。
　　もし、y＝0ならば、空で戻る。
　　もし、y＜0ならば、y=y+1。
　　もし、m≦2ならば、y=y-1。m=m+12。
　　(FLOOR(365.25*y))+FLOOR(y/400)-FLOOR(y/100)+FLOOR(30.59*(m-2))+d-678912で戻る。

＃西暦を全てユリウス暦として修正ユリウス日を取得する。
●修正ユリウス日取得J(日付を|日付の|日付で)
　　ymd＝日付を「/」で区切る。
　　y＝ymd[0]を整数変換。m＝ymd[1]を整数変換。d＝ymd[2]を整数変換。
　　もし、y＝0ならば、空で戻る。
　　もし、y＜0ならば、y=y+1。
　　もし、m≦2ならば、y=y-1。m=m+12。
　　(FLOOR(365.25*y))+FLOOR(30.59*(m-2))+d-678914で戻る。

＃修正ユリウス日からグレゴリオ暦の日付を取得する
●グレゴリオ暦取得(MJDから|MJDを|MJDの|MJDで)
　　n＝MJD+678881。
　　a＝4*n+3+4*FLOOR(3/4*FLOOR((4*(n+1)/146097+1)))。
　　b＝5*FLOOR((aと1461の剰余)/4)+2。
　　y＝FLOOR(a/1461)。m＝FLOOR(b/153)+3。d＝FLOOR((bと153の剰余)/5)+1。
　　もし、m>12ならば、y=y+1。m=m-12。
　　もし、y≦0ならば、y=y-1。
　　「{y}/{mを２でゼロ埋め}/{dを２でゼロ埋め}」で戻る。

＃修正ユリウス日からユリウス暦の日付を取得する
●ユリウス暦取得(MJDから|MJDを|MJDの|MJDで)
　　n＝MJD+678883。
　　a＝4*n+3。
　　b＝5*FLOOR((aと1461の剰余)/4)+2。
　　y＝FLOOR(a/1461)。m＝FLOOR(b/153)+3。d＝FLOOR((bと153の剰余)/5)+1。
　　もし、m>12ならば、y=y+1。m=m-12。
　　もし、y≦0ならば、y=y-1。
　　「{y}/{mを２でゼロ埋め}/{dを２でゼロ埋め}」で戻る。

//モジュロ？
//https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Remainder
●剰余(AとBの)
　((A%B)+B)%Bで戻る。

#-----暦注などを取得する（旧暦干支取得以外はおまけ）--------------------
＃干支
＃＃旧暦での暦月
//西暦の日付から、旧暦の年始・月初切り替えで、年の干支、月の干支、日の干支を配列で返す。
　※ 太陽暦採用以前の暦は旧暦なので年や月の変わり目が異なり、歴史的なナニカを扱う場合は干支も旧暦を元に取得しないと意味ない。
//旧暦取得の出来る645/2/2〜2099/12/31の間だけ。
//西暦は、1582/10/04までユリウス暦。1582/10/15からグレゴリオ暦。
●旧暦干支取得(日付を|日付で|日付の)
　　日付を「/」で区切る。年とは変数＝それ[0]。西暦月とは変数＝それ[1]。
　　日付から旧暦取得。それを「/」で区切る。月とは変数＝それ[1]。
　　もし、月の1文字左部分＝「閏」ならば、月の1から1文字削除。#月の「閏」を省く。
　　もし、月-西暦月＞９ならば、年＝年-１。# 旧暦ではまだ年が変わっていない
　　日付から年と月で干支配列作成して戻る。

＃＃節切
//立春・節気（節月）切り替えで、年の干支、月の干支、日の干支を配列で返す。占いとかはコレらしい。
//二十四節気取得の略算式が1900〜2099年の対応なので、その範囲内だけ。
●節切干支取得(日付を|日付で|日付の)
　　日付を「/」で区切る。西暦年とは変数＝それ[0]。年とは変数＝西暦年。
　　元日とは変数＝西暦年の「立春」を二十四節気日付取得。
　　もし、(元日と日付の日数差)＜０ならば、年＝西暦年-1。
　　節月とは変数＝日付の節月取得。
　　もし、節月%2＝1ならば、節月＝節月-1。
　　節月＝節月/2。
　　もし、節月≦０ならば、節月＝節月+12。
　　日付から年と節月で干支配列作成して戻る。

＃＃西暦での暦月。
//西暦の日付で、年の干支、月の干支、日の干支を配列で返す。
//西暦は、1582/10/04までユリウス暦。1582/10/15からグレゴリオ暦。
//ユリウス暦の期間は、なでしこ標準の「日ノ干支取得」と結果が異なります。
●干支取得(日付を|日付で|日付の)
　　日付を「/」で区切る。年とは変数＝それ[0]。月とは変数＝それ[1]。
　　日付から年と月で干支配列作成して戻る。

＃＃[年干支,月干支,日干支]の配列にして返す
●干支配列作成（日付から年と月で）
　　十干とは配列＝「甲乙丙丁戊己庚辛壬癸」を文字列分解。
　　十二支とは配列＝「子丑寅卯辰巳午未申酉戌亥」を文字列分解。
　　干支とは配列＝空。
　　年で年干支番号取得。
　　干支[0]＝十干[それ[0]]&十二支[それ[1]]。# 年の干支
　　年と月で月干支番号取得。
　　干支[1]＝十干[それ[0]]&十二支[それ[1]]。# 月の干支
　　日付の修正ユリウス日取得2。
　　それで日干支番号取得。
　　干支[2]＝十干[それ[0]]&十二支[それ[1]]。# 日の干支
　　干支で戻る。

＃＃干支番号取得
●年干支番号取得(西暦年の|西暦年で)
　　十干Noとは変数＝(西暦年+6)と10の剰余。
　　十二支Noとは変数＝(西暦年+8)と12の剰余。
　　「{十干No},{十二支No}」を「,」で区切って戻る。

●月干支番号取得(西暦年と月の|月で)
　　Noとは変数＝(月-1)+(西暦年-1600)*12。
　　十干Noとは変数＝(No+4)と10の剰余。
　　十二支Noとは変数＝(No+2)と12の剰余。
　　「{十干No},{十二支No}」を「,」で区切って戻る。

●日干支番号取得(修正ユリウス日の|修正ユリウス日で)
　　十干Noとは変数＝修正ユリウス日と10の剰余。
　　十二支Noとは変数＝(修正ユリウス日+2)と12の剰余。
　　「{十干No},{十二支No}」を「,」で区切って戻る。

＃六曜
//1582/10/15以降はグレゴリオ暦、それ以前はユリウス暦として六曜を取得（1582/10/15より前の日付で、なでしこ標準の六曜取得と結果が異なる）
●六曜取得２（西暦の|西暦で|西暦を）
　　六曜とは配列＝「大安,赤口,先勝,友引,先負,仏滅」を「,」で区切る。
　　旧暦とは変数＝西暦から旧暦取得。
　　旧暦＝旧暦を「/」で区切る。月＝旧暦[1]。
　　もし、月の1文字左部分＝「閏」ならば、月の1から1文字削除。#月の「閏」を省く。
　　六曜[(月+旧暦[2])%6]で戻る。

＃年の九星
●年家九星取得(日付を|日付の|日付で)
　　九星＝「一白水星,二黒土星,三碧木星,四緑木星,五黄土星,六白金星,七赤金星,八白土星,九紫火星」を「,」で区切る。
　　日付を「/」で区切る。
　　西暦年＝それ[0]
　　立春＝西暦年の「立春」を二十四節気日付取得。
　　もし、（日付の修正ユリウス日取得）＜（立春の修正ユリウス日取得）ならば、西暦年＝西暦年-１。
　　数＝11-西暦年%9-1。
　　もし、数≧9ならば、数＝数-9。
　　九星[数]で戻る

＃日の九星
●日家九星取得(日付を|日付の|日付で)
　　九星とは配列＝「一白水星,二黒土星,三碧木星,四緑木星,五黄土星,六白金星,七赤金星,八白土星,九紫火星」を「,」で区切る。
　　データとは配列＝空。　#修正ユリウス日,干支,切替日,開始九星
　　日付Uとは整数＝日付の修正ユリウス日取得2。
　　日付を「/」で区切る。
　　西暦年とは変数＝それ[0]
　　６回
　　　　C＝回数-1。年＝西暦年+(INT(C/2)-1)。
　　　　データ[C]＝空。
　　　　もし、C%2＝0ならば、
　　　　　　二至＝「夏至」。データ[C][3]＝8。
　　　　違えば、
　　　　　　二至＝「冬至」。データ[C][3]＝0。
　　　# 日家九星を求めたい日を含む年、およびその前年・翌年の夏至と冬至の修正ユリウス日と干支(No)を求める。
　　　　データ[C][0]＝年の二至を二十四節気日付取得して、それの修正ユリウス日取得2。
　　　　データ[C][1]＝(それ+50)と60の剰余。
　　　# 陽遁・陰遁の切替日の日付を求める。
　　　　もし、データ[C][1]≦28ならば、
　　　　　　データ[C][2]＝データ[C][0]-データ[C][1]。
　　　　違えば、もし、データ[C][1]≧32ならば、
　　　　　　データ[C][2]＝データ[C][0]+(60-データ[C][1])。
　　　　違えば、
　　　　　　データ[C][2]＝データ[C][0]+(30-データ[C][1])。
　　　　　　もし、二至＝「夏至」ならば、データ[C][3]＝2。
　　　　　　違えば、データ[C][3]＝6。
　　　　　　# 閏が連続した場合の調整
　　　　　　もし、C>0ならば、
　　　　　　　もし、データ[C][2]-データ[C-1][2]＝210でなければ、
　　　　　　　　データ[C-1][2]＝データ[C-1][2]-30。
　　　　　　　　もし、二至＝「夏至」ならば、データ[C-1][3]＝0。
　　　　　　　　違えば、データ[C-1][3]＝8。
　　# 見逃された閏の調整。
　　４回
　　　　C＝回数。
　　　　もし、データ[C][2]-データ[C-1][2]＝240ならば、
　　　　　　データ[C][2]＝データ[C][2]-30。
　　　　　　もし、C%2＝1ならば、データ[C][3]＝6。
　　　　　　違えば、データ[C][3]＝2。
　　# 求める日付の切替日。
　　数を１から(データの要素数)-1まで繰り返す
　　　　もし、日付U＜データ[数][2]ならば、
　　　　　　切替日＝データ[数-1][2]。開始九星＝データ[数-1][3]。陰陽＝(数-1)%2。
　　　　　　抜ける。
　　# 求める。
　　もし、陰陽＝1ならば、
　　　　九星[(日付U-切替日+開始九星)と9の剰余]で戻る。
　　違えば、
　　　　九星[開始九星-(日付U-切替日)と9の剰余]で戻る。

＃二十四節気（日家九星取得や節切干支取得の下請け）
//指定した二十四節気の日付を取得するもの。
//（なでしこの二十四節気取得は、その日が二十四節気に該当していた場合にそれを返す（該当しなければ空）という仕様）
//ただし、略算式の有効範囲は1900〜2099年(100年毎の閏年でない年についての補正が無い)
//http://addinbox.sakura.ne.jp/sekki24_topic.htm
●二十四節気日付取得(年のSを|Sで)
　　節気とは配列＝「小寒,大寒,立春,雨水,啓蟄,春分,清明,穀雨,立夏,小満,芒種,夏至,小暑,大暑,立秋,処暑,白露,秋分,寒露,霜降,立冬,小雪,大雪,冬至」を「,」で区切る。
　　データとは文字列＝『[{"Ｄ":6.3811,"Ａ":0.242778},{"Ｄ":21.1046,"Ａ":0.242765},{"Ｄ":4.8693,"Ａ":0.242713},{"Ｄ":19.7062,"Ａ":0.242627},{"Ｄ":6.3968,"Ａ":0.242512},{"Ｄ":21.4471,"Ａ":0.242377},{"Ｄ":5.6280,"Ａ":0.242231},{"Ｄ":20.9375,"Ａ":0.242083},{"Ｄ":6.3771,"Ａ":0.241945},{"Ｄ":21.9300,"Ａ":0.241825},{"Ｄ":6.5733,"Ａ":0.241731},{"Ｄ":22.2747,"Ａ":0.241669},{"Ｄ":8.0091,"Ａ":0.241642},{"Ｄ":23.7317,"Ａ":0.241654},{"Ｄ":8.4102,"Ａ":0.241703},{"Ｄ":24.0125,"Ａ":0.241786},{"Ｄ":8.5186,"Ａ":0.241898},{"Ｄ":23.8896,"Ａ":0.242032},{"Ｄ":9.1414,"Ａ":0.242179},{"Ｄ":24.2487,"Ａ":0.242328},{"Ｄ":8.2396,"Ａ":0.242469},{"Ｄ":23.1189,"Ａ":0.242592},{"Ｄ":7.9152,"Ａ":0.242689},{"Ｄ":22.6587,"Ａ":0.242752}]』をUTF8N変換。データはデータをJSONデコード。
　　年を「/」で区切る。
　　年＝それ[0]。
　　数＝節気の0からSを配列検索。
　　もし、数<４ならばＹ＝年-1。
　　違えばＹ＝年。
　　月とは変数＝（(数/2)を切捨）＋1。
　　日とは変数＝データ[数]@"Ｄ"とデータ[数]@"Ａ"でＹの節気計算。
　　「{年}/{月}/{日}」で戻る。

//二十四節気の日付ではなく、範囲（節入り日から次の節入り日の前日まで）で番号を取得して、配列番号を返すものです。
//小寒が最初で０スタート。
●節月取得(日付を|日付の|日付で)
　　データとは文字列＝『[{"Ｄ":6.3811,"Ａ":0.242778},{"Ｄ":21.1046,"Ａ":0.242765},{"Ｄ":4.8693,"Ａ":0.242713},{"Ｄ":19.7062,"Ａ":0.242627},{"Ｄ":6.3968,"Ａ":0.242512},{"Ｄ":21.4471,"Ａ":0.242377},{"Ｄ":5.6280,"Ａ":0.242231},{"Ｄ":20.9375,"Ａ":0.242083},{"Ｄ":6.3771,"Ａ":0.241945},{"Ｄ":21.9300,"Ａ":0.241825},{"Ｄ":6.5733,"Ａ":0.241731},{"Ｄ":22.2747,"Ａ":0.241669},{"Ｄ":8.0091,"Ａ":0.241642},{"Ｄ":23.7317,"Ａ":0.241654},{"Ｄ":8.4102,"Ａ":0.241703},{"Ｄ":24.0125,"Ａ":0.241786},{"Ｄ":8.5186,"Ａ":0.241898},{"Ｄ":23.8896,"Ａ":0.242032},{"Ｄ":9.1414,"Ａ":0.242179},{"Ｄ":24.2487,"Ａ":0.242328},{"Ｄ":8.2396,"Ａ":0.242469},{"Ｄ":23.1189,"Ａ":0.242592},{"Ｄ":7.9152,"Ａ":0.242689},{"Ｄ":22.6587,"Ａ":0.242752}]』をUTF8N変換。データはデータをJSONデコード。
　　日付を「/」で区切る。
　　年とは変数＝それ[0]。月とは変数＝それ[1]。日とは変数＝それ[2]。
　　もし、月<３ならば、Ｙ＝年-1。
　　違えば、Ｙ＝年。
　　もし、日>15ならば、数＝月*2-1。
　　違えば、数＝月*2-2
　　日＝二十四節気データ[数]["算出データ"]["Ｄ"]と二十四節気データ[数]["算出データ"]["Ａ"]でＹの節気計算。
　　もし、（「{年}/{月}/{日}」の修正ユリウス日取得2）≦（日付の修正ユリウス日取得2）ならば、数で戻る。
　　違えば、（数＋２３)％２４で戻る。

●節気計算(DとAでYの)
　　INT(D+(A*(Y-1900))-INT((Y-1900)/4))で戻る。
